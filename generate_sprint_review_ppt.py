#!/usr/bin/env python

from pptx import Presentation
from pptx.util import Inches

import os
import sys
import math
import json
import collections

prs = Presentation()
slide_count = 1


def normalize_sprint_name(sprint_name):
    return sprint_name.lower().replace(' ', '_')


def load_summary_ds(sprint_name):
    sprint_dir = './data/' + normalize_sprint_name(sprint_name)
    summary_file = os.path.join(sprint_dir, 'summary_updated.json')
    return json.loads(open(summary_file).read())


def get_all_tags(summary_ds):
    return summary_ds['meta']['tag_order']


def generate_first_slide(sprint_name, all_tags):
    print('STATUS: Generating slide ' + str(slide_count))
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    title.text = sprint_name
    subtitle.text = ', '.join(all_tags)


def generate_tag_jira_map(sprint_name, all_tags, summary_ds):
    ds = {}
    for user, user_jiras in summary_ds['users'].items():
        if user == 'meta':
            continue
        for jira in user_jiras:
            for tag in jira['tags']:
                jira_url = jira['url']
                if tag not in ds:
                    ds[tag] = {}
                if jira_url not in ds[tag]:
                    ds[tag][jira_url] = {'summary': jira['summary'], 'demo': None}
                if len(jira.get('demo', {})) > 0:
                    ds[tag][jira_url]['demo'] = ','.join(list(jira['demo'].keys()))
    return ds


def generate_middle_slides(sprint_name, all_tags, tag_jira_map):
    global slide_count
    for tag in all_tags:
        n_pages = 1
        n_tag_jiras = len(tag_jira_map[tag])
        if n_tag_jiras > 4:
            n_pages = math.ceil(n_tag_jiras / 4)

        print('STATUS: %s: Items: %d Pages: %d' % (tag, n_tag_jiras, n_pages))

        pages = 0
        added_entries = set()

        while pages < n_pages:
            print('STATUS: Generating slide ' + str(slide_count))

            jira_data_map = tag_jira_map[tag]
            jira_data_map = collections.OrderedDict(sorted(jira_data_map.items()))
            title_only_slide_layout = prs.slide_layouts[5]
            slide = prs.slides.add_slide(title_only_slide_layout)
            shapes = slide.shapes
            shapes.title.text = tag

            cols = 2
            rows = 5
            top = Inches(2.0)
            left = 0
            width = Inches(6.0)
            height = Inches(0.8)

            table = shapes.add_table(rows, cols, left, top, width, height).table

            # set column widths
            table.columns[0].width = Inches(2.0)
            table.columns[1].width = Inches(8.0)

            # write column headings
            table.cell(0, 0).text = 'JIRA'
            table.cell(0, 1).text = 'Summary'

            count = 1
            for jira_url, data in jira_data_map.items():
                if count > 4:
                    break
                if jira_url in added_entries:
                    continue

                jira_id = jira_url.split('/')[-1]
                print('STATUS: %s: Items: %d Pages: %d JIRA: %s' % (tag, n_tag_jiras, n_pages, jira_id))
                if data['demo'] is not None:
                    data['summary'] = data['summary'] + ' - DEMO by ' + data['demo']

                table.cell(count, 0).text = jira_id
                table.cell(count, 1).text = data['summary']
                added_entries.add(jira_url)
                count += 1

            pages += 1
            slide_count += 1


def generate_last_slide():
    print('STATUS: Generating slide ' + str(slide_count))
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    title = slide.shapes.title
    title.text = 'Auto-generated by - '

    paragraph = slide.shapes[0].text_frame.paragraphs[0]
    run = paragraph.add_run()
    run.text = 'saurabh-hirani/jira_sprint_slides'
    run.hyperlink.address = 'https://github.com/saurabh-hirani/jira_sprint_slides'


def main():
    sprint_name = os.environ.get('JIRA_SPRINT_NAME')
    if not sprint_name or sprint_name == '':
        sys.stderr.write('ERROR: env var JIRA_SPRINT_NAME not set\n')
        sys.exit(1)

    normalized_sprint_name = normalize_sprint_name(sprint_name)
    summary_ds = load_summary_ds(sprint_name)
    all_tags = get_all_tags(summary_ds)

    generate_first_slide(sprint_name, all_tags)
    tag_jira_map = generate_tag_jira_map(sprint_name, all_tags, summary_ds)
    print(json.dumps(tag_jira_map, indent=2))
    generate_middle_slides(sprint_name, all_tags, tag_jira_map)
    generate_last_slide()

    if not os.path.exists('output'):
        os.makedirs('output')
    path = os.path.join('output', normalized_sprint_name + '.pptx')
    prs.save(path)

    print('\nSTATUS: JIRA achievement unlocked - generated ppt in ' + path)

if __name__ == '__main__':
    main()
